## Declaración de ORDER BY

La cláusula `ORDER BY` en SQL es una herramienta esencial para ordenar los registros en su conjunto de resultados. Se puede utilizar junto con las declaraciones `SELECT` para organizar los datos recuperados en un orden específico, ya sea ascendente o descendente.

La cláusula `ORDER BY` permite ordenar los datos devueltos por una consulta `SELECT` en orden ascendente (ASC) o descendente (DESC) basado en una o más columnas. Por defecto, `ORDER BY` ordena los datos en orden ascendente.

### Sintaxis Básica de ORDER BY

```sql
SELECT column_name FROM table_name [WHERE condition] ORDER BY column_name [ASC | DESC];
```

### Ordenar por Múltiples Columnas
Es posible ordenar datos basándose en más de una columna. Esto proporciona un ordenamiento multinivel donde los datos se ordenan primero por la primera columna, luego por la segunda y así sucesivamente.

#### Sintaxis para Múltiples Columnas

```sql
ORDER BY column_name1 [ASC | DESC], column_name2 [ASC | DESC];
```

### Ejemplos de Uso de ORDER BY
**Ordenando por una Columna Individual**:

```sql
SELECT * FROM customer WHERE state = 'California' ORDER BY Customer_name;
```
Esta consulta ordena a los clientes de California por sus nombres en orden ascendente (por defecto).

**Ordenando por Múltiples Columnas**:

```sql
SELECT * FROM customer WHERE age > 25 ORDER BY City ASC, Customer_name DESC;
```
Esta consulta ordena a los clientes mayores de 25 años primero por ciudad en orden ascendente y luego por nombre en orden descendente dentro de cada ciudad.

**Ordenando en Orden Descendente**:
```sql
SELECT * FROM customer ORDER BY age DESC;
```
Esta consulta ordena a todos los clientes por edad en orden descendente.

### Consejos para Usar ORDER BY
- **Orden Predeterminado**: Si no especificas ASC o DESC, el orden es ascendente por defecto.
- **Posición de la Columna**: También puedes usar posiciones de columnas en lugar de nombres, por ejemplo, `ORDER BY 1` ordenaría por la primera columna en la lista de selección.
- **Consideraciones de Rendimiento**: Ordenar puede ser intensivo en recursos, especialmente para grandes conjuntos de datos. Es importante usar `ORDER BY` con prudencia para asegurar un rendimiento eficiente de la consulta.
